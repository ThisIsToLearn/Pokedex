[{"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/index.tsx":"1","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/App.tsx":"2","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/models/mock-pokemon.ts":"3","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/models/pokemon.ts":"4","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/Pokemon-list.tsx":"5","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/components/pokemon-card.tsx":"6","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/helpers/format-date.ts":"7","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/helpers/format-type.ts":"8","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/pokemon-detail.tsx":"9","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/page-not-found.tsx":"10","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/pokemon-edit.tsx":"11","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/components/pokemon-form.tsx":"12","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/services/pokemon-service.ts":"13","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/pokemon-add.tsx":"14","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/components/pokemon-search.tsx":"15","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/components/loader.tsx":"16","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/login.tsx":"17","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/services/authentification-service.ts":"18"},{"size":155,"mtime":1655969582491,"results":"19","hashOfConfig":"20"},{"size":1010,"mtime":1656514963333,"results":"21","hashOfConfig":"20"},{"size":2264,"mtime":1655969937624,"results":"22","hashOfConfig":"20"},{"size":804,"mtime":1656512093413,"results":"23","hashOfConfig":"20"},{"size":1128,"mtime":1656513294206,"results":"24","hashOfConfig":"20"},{"size":1454,"mtime":1656421212929,"results":"25","hashOfConfig":"20"},{"size":160,"mtime":1656336976388,"results":"26","hashOfConfig":"20"},{"size":1022,"mtime":1656083047316,"results":"27","hashOfConfig":"20"},{"size":2852,"mtime":1656513699854,"results":"28","hashOfConfig":"20"},{"size":497,"mtime":1656087370701,"results":"29","hashOfConfig":"20"},{"size":1037,"mtime":1656513817718,"results":"30","hashOfConfig":"20"},{"size":8668,"mtime":1656511759830,"results":"31","hashOfConfig":"20"},{"size":3118,"mtime":1656513097705,"results":"32","hashOfConfig":"20"},{"size":564,"mtime":1656509206244,"results":"33","hashOfConfig":"20"},{"size":1309,"mtime":1656512619866,"results":"34","hashOfConfig":"20"},{"size":566,"mtime":1656513659964,"results":"35","hashOfConfig":"20"},{"size":4400,"mtime":1656514151963,"results":"36","hashOfConfig":"20"},{"size":442,"mtime":1656495948317,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"rxhwuk",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/index.tsx",[],["79","80"],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/App.tsx",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/models/mock-pokemon.ts",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/models/pokemon.ts",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/Pokemon-list.tsx",["81","82"],"import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\nimport POKEMONS from '../models/mock-pokemon';\nimport PokemonCard from '../components/pokemon-card';\nimport PokemonService from '../services/pokemon-service';\nimport pokemonAdd from './pokemon-add';\nimport {Link} from 'react-router-dom'\nimport PokemonSearch from '../components/pokemon-search';\n\nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  \n  useEffect(() => {\n        setPokemons(POKEMONS);\n  }, []);\n  \n  return (\n    <div>\n      <h1 className=\"center\">Pokédex</h1>\n      <div className=\"container\"> \n        <div className=\"row\"> \n        <PokemonSearch/>\n        {pokemons.map(pokemon => (\n          <PokemonCard key={pokemon.id} pokemon={pokemon}/>\n        ))}\n        <div>\n          <Link to=\"/pokemon/add\" className='btn-floating btn-large waves-effect waves-light red z-depth-3' style={{ position:'fixed', bottom:'25px', right:'25px'}}> + Add</Link>\n        </div>\n        </div>\n      </div>\n    </div> \n  );\n}\n  \nexport default PokemonList;","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/components/pokemon-card.tsx",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/helpers/format-date.ts",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/helpers/format-type.ts",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/pokemon-detail.tsx",["83","84"],"import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport POKEMONS from '../models/mock-pokemon';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\nimport Loader from '../components/loader';\n  \ntype Params = { id: string };\n\nconst PokemonsDetail: FunctionComponent = () => {\n  const {id} = useParams();\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    POKEMONS.forEach(pokemon => {\n      if (id === pokemon.id.toString()) {\n        setPokemon(pokemon);\n      }\n    })\n  }, [id]);\n  \n\n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ pokemon.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\n                  Edit</Link>\n                  \n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ pokemon.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ pokemon.hp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Dégâts</td> \n                        <td><strong>{ pokemon.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                          {pokemon.types.map(type => (\n                           <span key={type} className={formatType(type)}>{type}</span>\n                          ))}</td> \n                      </tr> \n                      <tr> \n                        <td>Date de création</td> \n                        <td>{formatDate(pokemon.created)}</td> \n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                  <Link to=\"/\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h4 className=\"center\"><Loader/></h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonsDetail;","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/page-not-found.tsx",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/pokemon-edit.tsx",["85","86"],"import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PokemonForm from '../components/pokemon-form';\nimport POKEMONS from '../models/mock-pokemon';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/pokemon-service';\nimport Loarder from '../components/loader'\n \ntype Params = { id: string; };\n\nconst PokemonEdit: FunctionComponent = () => {\n  const {id} = useParams();\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    POKEMONS.forEach(pokemon => {\n      if (id === pokemon.id.toString()) {\n        setPokemon(pokemon);\n      }\n    })\n  }, [id]);\n\n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\n        </div>\n      ) : (\n        <h4 className=\"center\"><Loarder/></h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/components/pokemon-form.tsx",["87","88"],"import React, { FunctionComponent, useState } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n  \ntype Props = {\n  pokemon: Pokemon,\n  isEditForm: boolean\n};\n\ntype Field = {\n  value: any,\n  error?: string,\n  isValid?: boolean   \n}\ntype Form = {\n  picture: Field,\n  name: Field,\n  hp: Field,\n  cp: Field,\n  types: Field\n}\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n  \n  const navigate = useNavigate();\n\n  const [form, setForm] = useState<Form> ({\n    picture: {value: pokemon.picture},\n    name: {value: pokemon.name, isValid: true},\n    hp: {value: pokemon.hp, isValid: true},\n    cp: {value: pokemon.cp, isValid: true},\n    types: {value: pokemon.types, isValid: true},\n});\n\n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n\n  const hasType = (type:string):boolean => {\n    return form.types.value.includes(type);\n  }\n \n  const selectType = (type:string, e:React.ChangeEvent<HTMLInputElement>): void =>{\n    const checked = e.target.checked;\n    let newField: Field;\n\n    if(checked){\n      const newTypes: string [] = form.types.value.concat([type]);\n      newField = {value : newTypes};\n    } else {\n      const newTypes: string[] = form.types.value.filter((currentType:string) => currentType !== type);\n      newField = {value : newTypes};\n    }\n\n    setForm({...form, ...{types: newField} });\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = {[fieldName]: {value: fieldValue}};\n    \n    setForm({...form, ...newField});\n  }\n\n\n  const validateForm = () => {\n    let newForm : Form = form;\n\n    if(isAddForm()) {\n      const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n      const end =\".png\";\n    \n      if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n        const errorMsg: string=\"L'URL n'est pas valide.\";\n        const newField: Field = {value: form.picture.value, error: errorMsg, isValid:false};\n        newForm = {...form, ...{picture: newField}};\n      } else {\n        const newField: Field = {value: form.picture.value, error: '', isValid:true};\n        newForm = {...form,...{picture: newField}};\n      }\n    }\n\n\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg : string = 'Le nom du pokémon est requis (1-25).';\n      const newField : Field = {value: form.name.value, error: errorMsg, isValid: false};\n      newForm = {...newForm, ...{name: newField}};\n    } else {\n      const newField : Field = {value: form.name.value, error: '', isValid: true};\n      newForm = {...newForm, ...{name: newField}};\n    }\n\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg : string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField : Field = {value: form.hp.value, error: errorMsg, isValid: false};\n      newForm = {...newForm, ...{hp: newField}};\n    } else {\n      const newField : Field = {value: form.hp.value, error: '', isValid: true};\n      newForm = {...newForm, ...{hp: newField}};\n    }\n\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg : string = 'Les dégâts du pokémon sont compris entre 0 et 99.';\n      const newField : Field = {value: form.cp.value, error: errorMsg, isValid: false};\n      newForm = {...newForm, ...{cp: newField}};\n    } else {\n      const newField : Field = {value: form.cp.value, error: '', isValid: true};\n      newForm = {...newForm, ...{cp: newField}};\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid ;\n  }\n\n  const isTypesValid = (type: string) : boolean => {\n    \n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  const handleSubmit =(e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n   \n    if(isFormValid){\n        pokemon.picture = form.picture.value;\n        pokemon.name = form.name.value;\n        pokemon.hp = form.hp.value;\n        pokemon.cp = form.cp.value;\n        pokemon.types = form.types.value;\n\n        isEditForm ? updatePokemon() : addPokemon();\n    }\n  }  \n\n    const isAddForm = () => {\n      return !isEditForm;\n    }\n\n    const addPokemon = () => {\n      PokemonService.addPokemon(pokemon).then(() => navigate('/pokemons'));\n    }\n\n    const updatePokemon = () => {\n      PokemonService.updatePokemon(pokemon).then(() => navigate(`/pokemons/${pokemon.id}`));\n    }\n\n\n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => navigate(`/pokemons`));\n  }\n\n\n\n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n          {isEditForm && (\n             <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n              <a className='btn-floating halfway-fab waves-effect waves-light'\n                 onClick={deletePokemon}> Delete </a>\n            </div> \n            )}\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon picture */}\n                {isAddForm() && (\n                  <div className=\"form-group\">\n                  <label htmlFor=\"picture\">Image</label>\n                  <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\n                  {form.picture.error &&\n                  <div className='card-panel red accent-1'>\n                    {form.picture.error}\n                  </div>\n                  }\n                </div>\n                )}\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {form.name.error &&\n                  <div className='card-panel red accent-1'>\n                    {form.name.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name = \"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.hp.error &&\n                  <div className='card-panel red accent-1'>\n                    {form.hp.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.cp.error &&\n                  <div className='card-panel red accent-1'>\n                    {form.cp.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\"        >Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;","/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/services/pokemon-service.ts",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/pokemon-add.tsx",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/components/pokemon-search.tsx",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/components/loader.tsx",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/pages/login.tsx",[],"/Users/guiheuxsarah/Desktop/REACT-POKEMONS-APP/src/services/authentification-service.ts",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":22},{"ruleId":"93","severity":1,"message":"97","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":22},{"ruleId":"93","severity":1,"message":"98","line":10,"column":6,"nodeType":"95","messageId":"96","endLine":10,"endColumn":12},{"ruleId":"93","severity":1,"message":"94","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":22},{"ruleId":"93","severity":1,"message":"98","line":9,"column":6,"nodeType":"95","messageId":"96","endLine":9,"endColumn":12},{"ruleId":"93","severity":1,"message":"99","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":18},{"ruleId":"100","severity":1,"message":"101","line":174,"column":15,"nodeType":"102","endLine":175,"endColumn":42},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"@typescript-eslint/no-unused-vars","'PokemonService' is defined but never used.","Identifier","unusedVar","'pokemonAdd' is defined but never used.","'Params' is defined but never used.","'Navigate' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]